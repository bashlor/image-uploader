FROM node:alpine AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

# Set working directory
WORKDIR /app

# pnpm cannot support turbo prune yet. so need manual create isolated folder https://github.com/vercel/turborepo/issues/534
# RUN pnpm global add turbo
# COPY . .
# RUN turbo prune --scope=web --docker

# Need to change to correct app folder name for each flow [ deps, builder, runner ]
# set your APP_NAME
ENV APP_NAME=api

# Create apps folder
RUN mkdir -p apps

# Copy related packages and apps, warning: this solution can't copy package that only needed for the build.
COPY ./packages /app/packages
COPY ./apps/$APP_NAME /app/apps/$APP_NAME

# Copy clean root files to root folder
COPY ./turbo.json /app/turbo.json
COPY ./.gitignore /app/.gitignore
COPY ./.npmrc /app/.npmrc
# Add lockfile and package.json's of isolated subworkspace
COPY ./package.json /app/package.json
COPY ./pnpm-lock.yaml /app/pnpm-lock.yaml
COPY ./pnpm-workspace.yaml /app/pnpm-workspace.yaml

# 2. Rebuild the source code only when needed
FROM node:alpine AS builder
WORKDIR /app

SHELL ["/bin/sh", "-c"]

# set your APP_NAME
ENV APP_NAME=api

COPY --from=deps /app/ .

# Install Pnpm
ENV PNPM_HOME="/usr/local/pnpm"
ENV PATH="${PATH}:${PNPM_HOME}"

RUN apk update
RUN apk add --no-cache libc6-compat
RUN npm install --global pnpm \
    && SHELL=bash pnpm setup \
    && source /root/.bashrc


RUN pnpm turbo run build --filter=$APP_NAME
RUN pnpm --filter $APP_NAME --prod deploy pruned

# 3. Production image, copy all the files and run next
FROM node:alpine AS runner

WORKDIR /app

ENV NODE_ENV=production

# set your APP_NAME
ENV APP_NAME=api

RUN addgroup -g 1001 -S nodejs
RUN adduser -S fastify -u 1001

COPY --from=builder --chown=fastify:nodejs /app/pruned ./

USER fastify

EXPOSE 3000

ENV PORT 3000

ENTRYPOINT ["node", "build/app.js"]